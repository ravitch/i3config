#!/bin/bash

# Adjust volume on Pulse Audio sink $SINK by $STEP.
STEP=5%
sinkscript=$(cat << 'EOF'
/Sink #/ { sink = substr($2, 2) }
/State: RUNNING/ { active = 1 }
/Description: Built-in Audio Analog Stereo/ { active = 1 }
/Mute:/ { if (active) { printf "MUTED=%s\n", $2 } }
/Volume: 0:/ { if (active) { sub(/%/, "", $3); printf "VOLUME=%d\n", $3 } }
/Volume: front-left:/ { if (active) {sub(/%/, "", $5); printf "VOLUME=%d\n", $5 } }
/Base Volume:/ { if (active) { printf "SINK=%d\n", sink; exit } }
EOF
)
echo $(pactl list sinks | gawk "$sinkscript")
eval $(pactl list sinks | gawk "$sinkscript")

get_volume_icon() {
  if [ "$MUTED" == "yes" ]; then echo stock_volume-mute
  elif [ "$VOLUME" -eq 100 ];  then echo stock_volume-max
  elif [ "$VOLUME" -ge 70 ]; then echo stock_volume-high
  elif [ "$VOLUME" -ge 40 ]; then echo stock_volume-med
  elif [ "$VOLUME" -gt 0 ];  then echo stock_volume-min
  else echo stock_volume-0
  fi
}

case $1 in
  up)
    pactl set-sink-mute $SINK off
    pactl set-sink-volume $SINK +$STEP
    ;;
  down)
    if ! pactl set-sink-volume $SINK -- -$STEP > /dev/null 2&>1; then
        pactl set-sink-volume $SINK -$STEP
    fi
    ;;
  mute)
    pactl set-sink-mute $SINK toggle
    ;;
  show)
    echo $VOLUME
    ;;
esac

eval $(pactl list sinks | gawk "$sinkscript")
if [ "$VOLUME" -gt 100 ]; then
  pactl set-sink-volume $SINK 100%
fi
notify-send -i "$(get_volume_icon $VOLUME)" \
  -h int:value:$VOLUME \
  -h string:synchronous:volume \
  "Volume: $VOLUME%"
